#!/usr/bin/env python3
"""
Script de diagnostic et correction de la base de donn√©es
Corrige les probl√®mes de tables manquantes
"""

import sqlite3
import pandas as pd
import os
from sqlalchemy import create_engine, text

def check_database_structure(db_path='data/bank_reviews_dw.db'):
    """V√©rifie la structure de la base de donn√©es"""
    print("üîç DIAGNOSTIC DE LA BASE DE DONN√âES")
    print("="*50)
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Lister toutes les tables
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        print(f"üìä Tables trouv√©es: {len(tables)}")
        
        expected_tables = [
            'fact_reviews', 'dim_bank', 'dim_branch', 
            'dim_date', 'dim_sentiment', 'dim_topic', 'dim_reviewer'
        ]
        
        existing_tables = [table[0] for table in tables]
        
        for table in expected_tables:
            if table in existing_tables:
                # Compter les lignes
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"  ‚úÖ {table}: {count} lignes")
            else:
                print(f"  ‚ùå {table}: MANQUANTE")
        
        # V√©rifier la structure de fact_reviews
        if 'fact_reviews' in existing_tables:
            cursor.execute("PRAGMA table_info(fact_reviews)")
            columns = cursor.fetchall()
            print(f"\nüìã Colonnes de fact_reviews: {len(columns)}")
            
            expected_columns = [
                'review_id', 'bank_id', 'branch_id', 'date_id', 
                'sentiment_id', 'topic_id', 'star_rating', 'review_text'
            ]
            
            existing_columns = [col[1] for col in columns]
            
            for col in expected_columns:
                if col in existing_columns:
                    print(f"  ‚úÖ {col}")
                else:
                    print(f"  ‚ùå {col}: MANQUANTE")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du diagnostic: {e}")
        return False

def create_missing_tables(db_path='data/bank_reviews_dw.db'):
    """Cr√©e les tables manquantes"""
    print("\nüîß CR√âATION DES TABLES MANQUANTES")
    print("="*50)
    
    try:
        engine = create_engine(f'sqlite:///{db_path}')
        
        # SQL pour cr√©er dim_topic si elle n'existe pas
        create_dim_topic = """
        CREATE TABLE IF NOT EXISTS dim_topic (
            topic_id INTEGER PRIMARY KEY AUTOINCREMENT,
            topic_name VARCHAR(100) NOT NULL UNIQUE,
            topic_description TEXT,
            topic_keywords TEXT,
            created_at TIMESTAMP DEFAULT (datetime('now'))
        );
        """
        
        # SQL pour cr√©er dim_reviewer si elle n'existe pas
        create_dim_reviewer = """
        CREATE TABLE IF NOT EXISTS dim_reviewer (
            reviewer_id INTEGER PRIMARY KEY AUTOINCREMENT,
            reviewer_name VARCHAR(100),
            reviewer_hash VARCHAR(64) UNIQUE,
            review_count INTEGER DEFAULT 1,
            first_review_date DATE,
            last_review_date DATE,
            avg_rating DECIMAL(3, 2),
            created_at TIMESTAMP DEFAULT (datetime('now')),
            updated_at TIMESTAMP DEFAULT (datetime('now'))
        );
        """
        
        with engine.connect() as conn:
            conn.execute(text(create_dim_topic))
            conn.execute(text(create_dim_reviewer))
            conn.commit()
            
        print("‚úÖ Tables cr√©√©es avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        return False

def populate_missing_data(db_path='data/bank_reviews_dw.db'):
    """Peuple les tables avec des donn√©es de base si elles sont vides"""
    print("\nüìä PEUPLEMENT DES DONN√âES DE BASE")
    print("="*50)
    
    try:
        engine = create_engine(f'sqlite:///{db_path}')
        
        with engine.connect() as conn:
            # V√©rifier et peupler dim_sentiment
            result = conn.execute(text("SELECT COUNT(*) FROM dim_sentiment"))
            count = result.fetchone()[0]
            
            if count == 0:
                print("üìù Peuplement de dim_sentiment...")
                sentiments = [
                    ('positive', 'Avis exprimant une satisfaction', 0.1, 1.0),
                    ('negative', 'Avis exprimant une insatisfaction', -1.0, -0.1),
                    ('neutral', 'Avis neutres ou mitig√©s', -0.1, 0.1),
                    ('unknown', 'Sentiment non d√©termin√©', None, None)
                ]
                
                for sentiment, desc, min_score, max_score in sentiments:
                    conn.execute(text("""
                        INSERT OR IGNORE INTO dim_sentiment 
                        (sentiment_label, sentiment_description, sentiment_score_min, sentiment_score_max) 
                        VALUES (?, ?, ?, ?)
                    """), (sentiment, desc, min_score, max_score))
                
                print("  ‚úÖ dim_sentiment peupl√©e")
            
            # V√©rifier et peupler dim_topic avec des topics par d√©faut
            result = conn.execute(text("SELECT COUNT(*) FROM dim_topic"))
            count = result.fetchone()[0]
            
            if count == 0:
                print("üìù Peuplement de dim_topic...")
                topics = [
                    ('service_client', 'Qualit√© de l\'accueil et du service client'),
                    ('attente_temps', 'Temps d\'attente et rapidit√© du service'),
                    ('frais_tarifs', 'Frais bancaires et tarification'),
                    ('services_bancaires', 'Services et produits bancaires'),
                    ('technologie_digital', 'Services num√©riques et technologie'),
                    ('localisation_agence', 'Emplacement et accessibilit√© des agences'),
                    ('problemes_reclamations', 'Probl√®mes techniques et r√©clamations'),
                    ('satisfaction_generale', 'Satisfaction g√©n√©rale et recommandations'),
                    ('autres', 'Autres sujets non classifi√©s')
                ]
                
                for topic_name, description in topics:
                    conn.execute(text("""
                        INSERT OR IGNORE INTO dim_topic (topic_name, topic_description) 
                        VALUES (?, ?)
                    """), (topic_name, description))
                
                print("  ‚úÖ dim_topic peupl√©e")
            
            conn.commit()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du peuplement: {e}")
        return False

def create_simple_looker_datasets(db_path='data/bank_reviews_dw.db'):
    """Cr√©e des datasets simplifi√©s pour Looker en cas de probl√®me avec les jointures"""
    print("\nüìÅ CR√âATION DE DATASETS SIMPLIFI√âS")
    print("="*50)
    
    try:
        engine = create_engine(f'sqlite:///{db_path}')
        
        # Cr√©er le r√©pertoire de sortie
        os.makedirs('looker_data', exist_ok=True)
        
        # Dataset principal simplifi√© (sans jointures complexes)
        query_simple = """
        SELECT 
            f.review_id,
            f.star_rating,
            f.review_text,
            f.ensemble_score,
            f.sentiment_confidence,
            f.word_count,
            f.char_count,
            f.positive_words_count,
            f.negative_words_count,
            f.has_exclamation,
            f.has_question,
            f.has_caps,
            f.data_quality_score,
            f.textblob_polarity,
            f.vader_compound,
            f.custom_sentiment_score,
            f.topic_probability,
            f.review_date,
            b.bank_name,
            s.sentiment_label
        FROM fact_reviews f
        LEFT JOIN dim_bank b ON f.bank_id = b.bank_id
        LEFT JOIN dim_sentiment s ON f.sentiment_id = s.sentiment_id
        WHERE f.star_rating IS NOT NULL
        ORDER BY f.review_id
        """
        
        df_main = pd.read_sql(query_simple, engine)
        
        if not df_main.empty:
            # Ajouter des colonnes calcul√©es
            df_main['rating_category'] = df_main['star_rating'].apply(
                lambda x: 'Excellent (5‚òÖ)' if x == 5 
                else 'Bon (4‚òÖ)' if x == 4
                else 'Moyen (3‚òÖ)' if x == 3
                else 'Mauvais (1-2‚òÖ)' if x in [1, 2]
                else 'Non not√©'
            )
            
            df_main['sentiment_emoji'] = df_main['sentiment_label'].apply(
                lambda x: 'üòä Positif' if x == 'positive'
                else 'üòû N√©gatif' if x == 'negative'
                else 'üòê Neutre' if x == 'neutral'
                else '‚ùì Inconnu'
            )
            
            # Sauvegarder
            df_main.to_csv('looker_data/main_dataset_simple.csv', index=False, encoding='utf-8')
            print(f"‚úÖ Dataset principal cr√©√©: {len(df_main)} lignes")
        
        # Dataset r√©sum√© par banque
        query_bank_summary = """
        SELECT 
            b.bank_name,
            COUNT(f.review_id) as total_reviews,
            AVG(f.star_rating) as avg_rating,
            AVG(f.ensemble_score) as avg_sentiment_score,
            SUM(CASE WHEN s.sentiment_label = 'positive' THEN 1 ELSE 0 END) as positive_reviews,
            SUM(CASE WHEN s.sentiment_label = 'negative' THEN 1 ELSE 0 END) as negative_reviews,
            SUM(CASE WHEN s.sentiment_label = 'neutral' THEN 1 ELSE 0 END) as neutral_reviews,
            ROUND(SUM(CASE WHEN s.sentiment_label = 'positive' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as positive_percentage,
            AVG(f.word_count) as avg_word_count,
            AVG(f.data_quality_score) as avg_data_quality
        FROM fact_reviews f
        LEFT JOIN dim_bank b ON f.bank_id = b.bank_id
        LEFT JOIN dim_sentiment s ON f.sentiment_id = s.sentiment_id
        WHERE b.bank_name IS NOT NULL
        GROUP BY b.bank_id, b.bank_name
        ORDER BY total_reviews DESC
        """
        
        df_banks = pd.read_sql(query_bank_summary, engine)
        
        if not df_banks.empty:
            df_banks.to_csv('looker_data/bank_summary_simple.csv', index=False, encoding='utf-8')
            print(f"‚úÖ R√©sum√© banques cr√©√©: {len(df_banks)} banques")
        
        # Cr√©er des m√©triques de base
        metrics = {
            "total_reviews": len(df_main),
            "total_banks": df_main['bank_name'].nunique() if not df_main.empty else 0,
            "avg_rating": df_main['star_rating'].mean() if not df_main.empty else 0,
            "avg_sentiment": df_main['ensemble_score'].mean() if not df_main.empty else 0,
            "positive_percentage": (df_main['sentiment_label'] == 'positive').sum() / len(df_main) * 100 if not df_main.empty else 0
        }
        
        import json
        with open('looker_data/summary_metrics_simple.json', 'w', encoding='utf-8') as f:
            json.dump(metrics, f, ensure_ascii=False, indent=2)
        
        print("‚úÖ M√©triques de base cr√©√©es")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des datasets: {e}")
        return False

def main():
    """Fonction principale de diagnostic et correction"""
    print("üöÄ DIAGNOSTIC ET CORRECTION DE LA BASE DE DONN√âES")
    print("="*60)
    
    db_path = 'data/bank_reviews_dw.db'
    
    # 1. Diagnostic
    if not check_database_structure(db_path):
        print("‚ùå √âchec du diagnostic")
        return
    
    # 2. Cr√©er les tables manquantes
    if not create_missing_tables(db_path):
        print("‚ùå √âchec de la cr√©ation des tables")
        return
    
    # 3. Peupler les donn√©es de base
    if not populate_missing_data(db_path):
        print("‚ùå √âchec du peuplement des donn√©es")
        return
    
    # 4. V√©rification finale
    print("\nüîç V√âRIFICATION FINALE")
    print("="*50)
    check_database_structure(db_path)
    
    # 5. Cr√©er des datasets simplifi√©s pour Looker
    if not create_simple_looker_datasets(db_path):
        print("‚ùå √âchec de la cr√©ation des datasets")
        return
    
    print("\n‚úÖ CORRECTION TERMIN√âE AVEC SUCC√àS!")
    print("="*60)
    print("üìÅ Fichiers cr√©√©s dans looker_data/:")
    print("  - main_dataset_simple.csv")
    print("  - bank_summary_simple.csv") 
    print("  - summary_metrics_simple.json")
    print("\nüöÄ Vous pouvez maintenant utiliser ces fichiers dans Looker Studio")
    print("üìã Ou r√©essayer: python scripts/looker_setup.py")

if __name__ == "__main__":
    main()